name: Manual Windows Release
on:
  workflow_dispatch:
    inputs:
      tag:
        description: Tag (e.g., v1.0.2)
        required: true
      name:
        description: Release name
        required: true
      changelog:
        description: Release notes/body
        required: false

jobs:
  update-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout+v4

      - name: Write changelog to file
        run: |
          echo "${{ github.event.inputs.changelog }}" > RELEASE-BODY.txt

      - name: Update GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.event.inputs.tag }}
          name: ${{ github.event.inputs.name }}
          bodyFile: RELEASE-BODY.txt
          allowUpdates: true
          makeLatest: true
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN ?}}
