/**
 * Script para criar release do Krigzis
 * Comprime o build manual para distribui√ß√£o
 */

const fs = require('fs-extra');
const path = require('path');
const { execSync } = require('child_process');

const MANUAL_BUILD_DIR = path.join(__dirname, '..', 'manual-build');
const RELEASES_DIR = path.join(__dirname, '..', 'releases');

async function createRelease() {
    const packageJson = require('../package.json');
    const version = packageJson.version;
    const releaseDate = new Date().toISOString().split('T')[0]; // YYYY-MM-DD
    
    console.log(`üöÄ Criando release do Krigzis v${version}...`);
    
    try {
        // 1. Verificar se build manual existe
        if (!fs.existsSync(MANUAL_BUILD_DIR)) {
            console.log('üì¶ Build manual n√£o encontrado. Criando...');
            execSync('node scripts/manual-build.js', { stdio: 'inherit' });
        }
        
        // 2. Criar diret√≥rio de releases
        fs.ensureDirSync(RELEASES_DIR);
        
        // 3. Nome do arquivo de release
        const releaseFileName = `Krigzis-v${version}-Windows-Portable.zip`;
        const releasePath = path.join(RELEASES_DIR, releaseFileName);
        
        // 4. Verificar se PowerShell est√° dispon√≠vel para compress√£o
        console.log('üì¶ Comprimindo build...');
        try {
            // Usando PowerShell para criar ZIP (nativo no Windows)
            const psCommand = `Compress-Archive -Path "${MANUAL_BUILD_DIR}\\*" -DestinationPath "${releasePath}" -Force`;
            execSync(`powershell -Command "${psCommand}"`, { stdio: 'inherit' });
            
            console.log('‚úÖ Release criado com sucesso!');
            
        } catch (psError) {
            // Fallback: Copiar pasta com nome de release
            console.log('‚ö†Ô∏è PowerShell Compress-Archive falhou. Criando c√≥pia da pasta...');
            const releaseFolderPath = path.join(RELEASES_DIR, `Krigzis-v${version}-Windows-Portable`);
            
            if (fs.existsSync(releaseFolderPath)) {
                fs.removeSync(releaseFolderPath);
            }
            
            fs.copySync(MANUAL_BUILD_DIR, releaseFolderPath);
            console.log('‚úÖ Pasta de release criada!');
        }
        
        // 5. Criar arquivo de informa√ß√µes do release
        const releaseInfo = {
            name: `Krigzis v${version}`,
            version: version,
            buildDate: releaseDate,
            platform: 'Windows',
            type: 'Portable',
            requirements: [
                'Windows 10 ou superior',
                'Node.js 16+ (ser√° instalado automaticamente se necess√°rio)',
                '4GB RAM m√≠nimo',
                '100MB espa√ßo em disco'
            ],
            features: [
                'Gerenciamento avan√ßado de tarefas',
                'Sistema de categorias personaliz√°veis',
                'Timer Pomodoro integrado',
                'Relat√≥rios e estat√≠sticas',
                'Sistema de notas vinculadas',
                'Assistente IA configur√°vel',
                'Verifica√ß√£o autom√°tica de atualiza√ß√µes',
                'Interface dark mode',
                'Backup e sincroniza√ß√£o'
            ],
            installation: [
                '1. Extrair o arquivo ZIP',
                '2. Executar start.bat',
                '3. Aguardar instala√ß√£o autom√°tica das depend√™ncias',
                '4. Aplica√ß√£o ser√° iniciada automaticamente'
            ],
            changelog: [
                '‚Ä¢ Implementa√ß√£o do sistema de distribui√ß√£o',
                '‚Ä¢ √çcones criados com gradiente do Krigzis',
                '‚Ä¢ Sistema de atualiza√ß√µes via GitHub Releases',
                '‚Ä¢ T√≠tulos padronizados em todas as abas',
                '‚Ä¢ √çcone IA com atualiza√ß√£o em tempo real',
                '‚Ä¢ Categorias corrigidas no modal de tarefas',
                '‚Ä¢ Build otimizado sem depend√™ncias problem√°ticas'
            ],
            size_mb: 'Aproximadamente 150MB ap√≥s instala√ß√£o',
            github_url: 'https://github.com/PauloHYBEX/krigzis',
            support_url: 'https://github.com/PauloHYBEX/krigzis/issues'
        };
        
        fs.writeJsonSync(
            path.join(RELEASES_DIR, `release-info-v${version}.json`),
            releaseInfo,
            { spaces: 2 }
        );
        
        // 6. Criar changelog em markdown
        const changelogMd = `# Krigzis v${version} - Release Notes

**Data de Lan√ßamento:** ${releaseDate}
**Tipo:** Vers√£o Port√°vel para Windows

## üÜï Novidades

${releaseInfo.changelog.map(item => item).join('\n')}

## üíø Instala√ß√£o

${releaseInfo.installation.map((step, i) => `${i + 1}. ${step.replace(/^\d+\.\s*/, '')}`).join('\n')}

## üìã Requisitos do Sistema

${releaseInfo.requirements.map(req => `- ${req}`).join('\n')}

## ‚ú® Funcionalidades Principais

${releaseInfo.features.map(feature => `- ${feature}`).join('\n')}

## üìû Suporte

- **Issues/Bugs:** ${releaseInfo.support_url}
- **Reposit√≥rio:** ${releaseInfo.github_url}

## üìä Informa√ß√µes T√©cnicas

- **Tamanho:** ${releaseInfo.size_mb}
- **Plataforma:** ${releaseInfo.platform}
- **Arquitetura:** x64
- **Tipo de Build:** Port√°vel (n√£o requer instala√ß√£o)

---

**Download:** [Krigzis-v${version}-Windows-Portable.zip](./releases/${releaseFileName})
`;
        
        fs.writeFileSync(
            path.join(RELEASES_DIR, `CHANGELOG-v${version}.md`),
            changelogMd
        );
        
        // 7. Relat√≥rio final
        console.log('');
        console.log('üéØ Release Summary:');
        console.log(`üìÅ Local: ${RELEASES_DIR}`);
        console.log(`üì¶ Arquivo: ${releaseFileName}`);
        console.log(`üìã Vers√£o: v${version}`);
        console.log(`üìÖ Data: ${releaseDate}`);
        console.log('');
        console.log('üìã Arquivos criados:');
        
        const releaseFiles = fs.readdirSync(RELEASES_DIR);
        releaseFiles.forEach(file => {
            const filePath = path.join(RELEASES_DIR, file);
            const stats = fs.statSync(filePath);
            const sizeMB = (stats.size / 1024 / 1024).toFixed(2);
            console.log(`   ‚úÖ ${file} (${sizeMB}MB)`);
        });
        
        console.log('');
        console.log('üöÄ Pr√≥ximos passos para distribui√ß√£o:');
        console.log('   1. Criar reposit√≥rio no GitHub');
        console.log('   2. Fazer push do c√≥digo');
        console.log('   3. Criar release no GitHub com tag v' + version);
        console.log('   4. Fazer upload do arquivo ZIP');
        console.log('   5. Copiar changelog para descri√ß√£o do release');
        
    } catch (error) {
        console.error('‚ùå Erro durante cria√ß√£o do release:', error.message);
        process.exit(1);
    }
}

// Executar se chamado diretamente
if (require.main === module) {
    createRelease();
}

module.exports = { createRelease };